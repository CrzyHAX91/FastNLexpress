name: Python CI/CD Workflow

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.9-slim', '3.10-slim', '3.11-slim'] # Gebruik de slim-versies van Python

    steps:
      # Checkout de repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Set up Python met slim-versie
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Cache pip dependencies
      - name: Cache Python Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      # Installeer afhankelijkheden
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage flake8  # Installeer coverage & flake8

      # Stel omgeving variabelen in
      - name: Export Environment Variables
        run: echo "DJANGO_SETTINGS_MODULE=dropship_project.settings" >> $GITHUB_ENV

      # Voer tests uit
      - name: Run Tests
        run: python manage.py test

      # Genereer Coverage Report
      - name: Run Coverage
        run: |
          coverage run --source='.' manage.py test
          coverage report
          coverage xml -o coverage.xml
        if: always()

      # Upload Coverage Report naar Codecov
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          fail_ci_if_error: false
          verbose: true
        if: always()

      # Controleer codekwaliteit met flake8
      - name: Lint with flake8
        run: flake8 .

      # Opruimen van pip-cache
      - name: Cleanup Cache
        run: python -m pip cache purge
        if: always()

