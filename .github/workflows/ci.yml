name: Python CI/CD Workflow

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10'] # Test against multiple Python versions

    steps:
      # Checkout the code
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Set up Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Cache pip dependencies
      - name: Cache Python Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      # Install dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Set environment variables
      - name: Export Environment Variables
        run: echo "DJANGO_SETTINGS_MODULE=dropship_project.settings" >> $GITHUB_ENV

      # Run Tests
      - name: Run Tests
        run: python manage.py test

      # Generate Coverage Report (optional)
      - name: Run Coverage
        run: |
          pip install coverage
          coverage run --source='.' manage.py test
          coverage report
        if: always()

      # Clean up pip cache
      - name: Cleanup Cache
        if: always()
        run: python -m pip cache purge

      # Upload Coverage Report (optional)
      - name: Upload Coverage Report
        if: always()
        run: |
          pip install coverage
          coverage xml
